# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import data_node_pb2 as data__node__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in data_node_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataNodeStub(object):
    """Servicio expuesto por cada DataNode (cada máquina/worker).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadBlock = channel.stream_unary(
                '/griddfs.DataNode/UploadBlock',
                request_serializer=data__node__pb2.UploadBlockRequest.SerializeToString,
                response_deserializer=data__node__pb2.UploadBlockResult.FromString,
                _registered_method=True)
        self.DownloadBlock = channel.unary_stream(
                '/griddfs.DataNode/DownloadBlock',
                request_serializer=data__node__pb2.DownloadBlockRequest.SerializeToString,
                response_deserializer=data__node__pb2.DataChunk.FromString,
                _registered_method=True)
        self.DeleteBlock = channel.unary_unary(
                '/griddfs.DataNode/DeleteBlock',
                request_serializer=data__node__pb2.DeleteBlockRequest.SerializeToString,
                response_deserializer=data__node__pb2.Ack.FromString,
                _registered_method=True)
        self.Health = channel.unary_unary(
                '/griddfs.DataNode/Health',
                request_serializer=data__node__pb2.HealthRequest.SerializeToString,
                response_deserializer=data__node__pb2.HealthResponse.FromString,
                _registered_method=True)


class DataNodeServicer(object):
    """Servicio expuesto por cada DataNode (cada máquina/worker).
    """

    def UploadBlock(self, request_iterator, context):
        """SUBIR un bloque (cliente → servidor) en streaming.
        Primer mensaje: START; luego muchos CHUNK; al final COMMIT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadBlock(self, request, context):
        """DESCARGAR un bloque (servidor → cliente) en streaming.
        Permite rangos (offset/length) para reintentos/reanudación.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBlock(self, request, context):
        """(Opcional) Borrar un bloque específico en este DataNode.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """(Opcional) Health check simple.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadBlock': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadBlock,
                    request_deserializer=data__node__pb2.UploadBlockRequest.FromString,
                    response_serializer=data__node__pb2.UploadBlockResult.SerializeToString,
            ),
            'DownloadBlock': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadBlock,
                    request_deserializer=data__node__pb2.DownloadBlockRequest.FromString,
                    response_serializer=data__node__pb2.DataChunk.SerializeToString,
            ),
            'DeleteBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBlock,
                    request_deserializer=data__node__pb2.DeleteBlockRequest.FromString,
                    response_serializer=data__node__pb2.Ack.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=data__node__pb2.HealthRequest.FromString,
                    response_serializer=data__node__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'griddfs.DataNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('griddfs.DataNode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataNode(object):
    """Servicio expuesto por cada DataNode (cada máquina/worker).
    """

    @staticmethod
    def UploadBlock(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/griddfs.DataNode/UploadBlock',
            data__node__pb2.UploadBlockRequest.SerializeToString,
            data__node__pb2.UploadBlockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/griddfs.DataNode/DownloadBlock',
            data__node__pb2.DownloadBlockRequest.SerializeToString,
            data__node__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/griddfs.DataNode/DeleteBlock',
            data__node__pb2.DeleteBlockRequest.SerializeToString,
            data__node__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/griddfs.DataNode/Health',
            data__node__pb2.HealthRequest.SerializeToString,
            data__node__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
